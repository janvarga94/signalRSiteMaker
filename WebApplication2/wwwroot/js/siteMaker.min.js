var selected = {				
	el: document.body,			//selected element
};
var	newEl=null;				 //element that is being created
var Clipboard=null;  // for copy or cut
var mouseDown={				//what have we clicked	
		startX: null,		//starting positions of element 	
		startY: null,
		startWidth: 0,
		startHeight: 0,
		leftTop: false,			
		rightBottom: false,
		leftTopRot: false,
		rightBottomRot: false,
		replace: false
};	
var editor=document.getElementById('editor');
var Keyboard;

String.prototype.int = function(){
	return parseInt(this);
}
function el(id){
	return document.getElementById(id);
}
function changeSelection(newSelected){  
	selected={
		el: newSelected,
	};
	fixReplace(newSelected);		
	editChangeSelection();
}
function fixReplace(newSelected){   //fixing replace brackets on newSelected element
	var leftTop=document.getElementById('leftTop'),
		rightBottom=document.getElementById('rightBottom'),
		leftTopRot=document.getElementById('leftTopRot'),
		rightBottomRot=document.getElementById('rightBottomRot'),
		replace=document.getElementById('replace');

	if(newSelected==document.body){
		leftTop.style.left=-100;
		rightBottom.style.left=-100;
		leftTopRot.style.left=-100;
		rightBottomRot.style.left=-100;
		replace.style.left=-100;
		return;
	}
	leftTop.style.left=getOffset(newSelected).left-7;
	leftTop.style.top=getOffset(newSelected).top-7;

	rightBottom.style.left=getOffset(newSelected).left+getOffset(newSelected).width-23;
	rightBottom.style.top=getOffset(newSelected).top+getOffset(newSelected).height-23;

	leftTopRot.style.left=getOffset(newSelected).left-24;
	leftTopRot.style.top=getOffset(newSelected).top-24;

	rightBottomRot.style.left=getOffset(newSelected).left+getOffset(newSelected).width-6;
	rightBottomRot.style.top=getOffset(newSelected).top+getOffset(newSelected).height-6;

	replace.style.left=getOffset(newSelected).left+getOffset(newSelected).width/2 -20;
	replace.style.top=getOffset(newSelected).top+getOffset(newSelected).height/2 -20;
}
function editChangeSelection(){								//after changeing selection of element, we do this
	text.disabled=selected.el==document.body;
	if(selected.el!=document.body){	
		var helpText = "";
		var child = selected.el.firstChild;
		while(child) {
		    if (child.nodeType === 3) { // nodeType === Node.TEXT_NODE
		        helpText += child.nodeValue;
		    }
		    child = child.nextSibling;
		}
		text.value=helpText;
	}else
		text.value="";
																	//now we set values to range which represents shadows
	var shadow=window.getComputedStyle(selected.el)['box-shadow'];
	if(shadow!='none'){
		var color=shadow.substring(0,shadow.indexOf(')')+1);
		var shadows=shadow.substring(shadow.indexOf(')')+1).trim();
		var arr=shadows.split(' ');
		sh1.value=parseInt(arr[0]);
		sh2.value=parseInt(arr[1]);
		sh3.value=parseInt(arr[2]);
		sh4.value=parseInt(arr[3]);
	}else{
		sh1.value=0;
		sh2.value=0;
		sh3.value=0;
		sh4.value=0;
	}
}
function getOffset( el ) {		//x,y distance from left and top margins including scrolling of page, also returning width and height
    var _x=el.getBoundingClientRect().left + document.body.scrollLeft;
    var _y=el.getBoundingClientRect().top  + document.body.scrollTop;
    var _w = el.offsetWidth;
    var _h = el.offsetHeight;
    return { top: _y, left: _x,width: _w , height: _h };
}
function elAlignLeft(){
		selected.el.style['position'] = 'absolute';
		selected.el.style.left=0;
	fixReplace(selected.el);
}
function elAlignCenter(){	
		selected.el.style['position'] = 'absolute';
		var parentWidth=parseInt(window.getComputedStyle(selected.el.parentElement).width);
		var elWidth=parseInt(window.getComputedStyle(selected.el).width);
		selected.el.style.left=parentWidth/2-elWidth/2;
	fixReplace(selected.el);
}
function elAlignRight(){
		selected.el.style['position'] = 'absolute';
		var parentWidth=parseInt(window.getComputedStyle(selected.el.parentElement).width);
		var elWidth=parseInt(window.getComputedStyle(selected.el).width);
		selected.el.style.left=parentWidth-elWidth;
	fixReplace(selected.el);
}
function exportProject(filename){ // ctrl+s is save project, shift+s is export
	var saveEngine = document.getElementById("engine");
	document.body.removeChild(document.getElementById('engine'));
  var text='<html><head></head>'+document.body.outerHTML+'</html>';
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
  pom.setAttribute('download', filename);
  pom.click();

  if(document.body.innerHTML.replace(" ","") == "")
  	document.body.appendChild(saveEngine);
  else
	document.body.insertBefore(saveEngine, document.body.firstChild);
}


function getOterHtmlForElement(target) {
    var wrap = document.createElement('div');
    wrap.appendChild(target.cloneNode(true));
    return wrap.innerHTML;
} 


function attachHandlersToNewCreatedElement(element) {
    element.oncontextmenu = function (ev) {						//so that we could select it
        ev.stopPropagation();
        ev.preventDefault();
        if (ev.which == 3) {
            changeSelection(this);
        }
        return false;
    };
}
Keyboard = new function(){  //keyboard object
	var v1 = ["","","","CANCEL","","","HELP","","BACK_SPACE","TAB","","","CLEAR","ENTER","RETURN","","SHIFT","CONTROL","ALT","PAUSE","CAPS_LOCK","KANA","EISU","JUNJA","FINAL","HANJA","","ESCAPE","CONVERT","NONCONVERT","ACCEPT","MODECHANGE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","SELECT","PRINT","EXECUTE","PRINTSCREEN","INSERT","DELETE","","0","1","2","3","4","5","6","7","8","9","COLON","SEMICOLON","LESS_THAN","EQUALS","GREATER_THAN","QUESTION_MARK","AT","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","WIN","","CONTEXT_MENU","","SLEEP","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","","","","","","","","","NUM_LOCK","SCROLL_LOCK","WIN_OEM_FJ_JISHO","WIN_OEM_FJ_MASSHOU","WIN_OEM_FJ_TOUROKU","WIN_OEM_FJ_LOYA","WIN_OEM_FJ_ROYA","","","","","","","","","","CIRCUMFLEX","EXCLAMATION","DOUBLE_QUOTE","HASH","DOLLAR","PERCENT","AMPERSAND","UNDERSCORE","OPEN_PAREN","CLOSE_PAREN","ASTERISK","PLUS","PIPE","HYPHEN_MINUS","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","TILDE","","","","","VOLUME_MUTE","VOLUME_DOWN","VOLUME_UP","","","SEMICOLON","EQUALS","COMMA","MINUS","PERIOD","SLASH","BACK_QUOTE","","","","","","","","","","","","","","","","","","","","","","","","","","","OPEN_BRACKET","BACK_SLASH","CLOSE_BRACKET","QUOTE","","META","ALTGR","","WIN_ICO_HELP","WIN_ICO_00","","WIN_ICO_CLEAR","","","WIN_OEM_RESET","WIN_OEM_JUMP","WIN_OEM_PA1","WIN_OEM_PA2","WIN_OEM_PA3","WIN_OEM_WSCTRL","WIN_OEM_CUSEL","WIN_OEM_ATTN","WIN_OEM_FINISH","WIN_OEM_COPY","WIN_OEM_AUTO","WIN_OEM_ENLW","WIN_OEM_BACKTAB","ATTN","CRSEL","EXSEL","EREOF","PLAY","ZOOM","","PA1","WIN_OEM_CLEAR",""];
	var v2 = new Array(v1.length);
	var v3 = new Object(v1.length);
	var v4 = new Object(v1.length);
	for(var i=0;i<v1.length;i++){  
		v3[v1[i]]=i;
		v2[i] = false;
		v4[v1[i]] = false;
	}
	this.numToKey = v1;
	this.numToBool = v2;
	this.keyToBool = v4;
	this.keyToNum = v3;
	this.toTrue = function(num){
		if(num>255) return;
		this.numToBool[num]=true;
		this.keyToBool[v1[num]]=true;
	}
	this.toFalse = function(num){
		if(num>255) return;
		this.numToBool[num]=false;
		this.keyToBool[v1[num]]=false;
	}
}();
document.onkeydown= function(e){
	Keyboard.toTrue(e.which);
	//e.preventDefault();

	if(Keyboard.keyToBool["DELETE"]){
		if(selected.el!=document.body){
            window.myHubProxy.invoke("removeElement", selected.el.id);
   			var parent=selected.el.parentElement;
   				parent.removeChild(selected.el);
                        changeSelection(parent);

		}
	}
	if(Keyboard.keyToBool["INSERT"]){
		if(editor.style.visibility=='visible')
		 	editor.style.visibility='hidden';	// Insert button means show or hide options
   		else 	editor.style.visibility='visible';		
	}
	if(Keyboard.keyToBool['CONTROL'] && Keyboard.keyToBool['C']){				//copy
		if(selected.el!=document.body)
			Clipboard=selected.el.outerHTML;
	}
	if(Keyboard.keyToBool['CONTROL'] && Keyboard.keyToBool['V']){			//cut
		if(selected.el!=document.body){
			Clipboard=selected.el.outerHTML;
			var parent=selected.el.parentElement;
			parent.removeChild(selected.el);
			changeSelection(parent);
		}
	}
	if(Keyboard.keyToBool['CONTROL'] && Keyboard.keyToBool['X']){				// paste
		if(Clipboard!=null){
			var div=document.createElement('div');
			div.innerHTML = Clipboard;
			div.childNodes[0].oncontextmenu= function(ev) {
			    ev.stopPropagation();
			    ev.preventDefault();
			    if(ev.which==3){
			    	changeSelection(this);
			    }
			    return false;
			};
			selected.el.appendChild(div.childNodes[0]);
		}
	}
	if(Keyboard.keyToBool['SHIFT'] && Keyboard.keyToBool['S']){			//save in some way
		exportProject('yourProject.html');
	}
}
document.onkeyup= function(e){
	var charCode = (typeof e.which == "number") ? e.which : e.keyCode;
	Keyboard.toFalse(charCode);
}
document.body.onmousedown = function (e) {
    if (e.which != 1) return;				//if is not left click return, if is start creating element
    newEl = document.createElement(document.getElementById('whichTag').value);
    newEl.style.backgroundColor = 'rgba(0,0,0,0.1)';
    newEl.style.position = 'absolute';
    newEl.style.left = e.pageX - getOffset(selected.el).left;
    newEl.style.top = e.pageY - getOffset(selected.el).top;
    newEl.id = generateUniqueId();
    attachHandlersToNewCreatedElement(newEl);
    selected.el.appendChild(newEl);
    mouseDown.startX = e.pageX;
    mouseDown.startY = e.pageY;
    var selectedId = selected.el.nodeName.toLowerCase() == "body" ? "" : selected.el.id;
    window.myHubProxy.invoke("addElement", getOterHtmlForElement(newEl), selectedId);
}
document.body.onmousemove = function (ev) {
    if (ev.which != 1) return;
    var whatToChange = (el('radR1').checked ? selected.el.style : selected.el);
    if (newEl != null) { 			//if we are creating then change size with dragging
        var newWhatToChange = (el('radR1').checked ? newEl.style : newEl);
        newWhatToChange.width = ev.pageX - mouseDown.startX;
        if (Keyboard.keyToBool['SHIFT'])	 //if is pressed shift that resize proportionally
            newWhatToChange.height = newEl.style.width;
        else
            newWhatToChange.height = ev.pageY - mouseDown.startY;
    }
    if (mouseDown.leftTop) {		// if changing size with left top corner
        if (Keyboard.keyToBool['SHIFT']) { //if is pressed shift that resize proportionally
            selected.el.style.left = (ev.pageX - getOffset(selected.el.parentElement).left) + "px";
            selected.el.style.top = (ev.pageX - mouseDown.startX + mouseDown.startY - selected.el.parentElement.offsetTop) + "px";

            whatToChange.width = (mouseDown.startWidth - (ev.pageX - mouseDown.startX)) + "px";
            whatToChange.height = (mouseDown.startHeight - mouseDown.startWidth + parseInt(whatToChange.width)) + "px";
        } else {
            selected.el.style.left = (ev.pageX - getOffset(selected.el.parentElement).left) + "px";
            selected.el.style.top = (ev.pageY - getOffset(selected.el.parentElement).top) + "px";

            whatToChange.width = (mouseDown.startWidth - (ev.pageX - mouseDown.startX)) + "px";
            whatToChange.height = (mouseDown.startHeight - (ev.pageY - mouseDown.startY)) + "px";
        }
        fixReplace(selected.el);
    }
    if (mouseDown.rightBottom) {	// if changing size with right bottom corner
        if (Keyboard.keyToBool['SHIFT']) { //if is pressed shift that resize proportionally
            whatToChange.width = (mouseDown.startWidth + ev.pageX - mouseDown.startX) + "px";
            whatToChange.height = (mouseDown.startHeight + parseInt(whatToChange.width) - mouseDown.startWidth) + "px";
        } else {
            whatToChange.width = (mouseDown.startWidth + ev.pageX - mouseDown.startX) + "px" ;
            whatToChange.height = (mouseDown.startHeight + ev.pageY - mouseDown.startY) + "px";
        }
        fixReplace(selected.el);
    }
    if (mouseDown.replace) {		//if replacing
        selected.el.style.left = (ev.pageX - getOffset(selected.el).width / 2 - getOffset(selected.el.parentElement).left) + "px";
        selected.el.style.top = (ev.pageY - getOffset(selected.el).height / 2 - getOffset(selected.el.parentElement).top) + "px";

        fixReplace(selected.el);
    }
    if (mouseDown.leftTopRot || mouseDown.rightBottomRot) {		//if rotating
        var deg = ev.pageX - mouseDown.startX;
        selected.el.style['transform'] = 'rotate(' + deg + 'deg)';
    }

    window.myHubProxy.invoke("updateElement", getOterHtmlForElement(newEl || selected.el));
}
document.body.onmouseup = function (ev) {
    var distanceX = Math.abs(mouseDown.startX - ev.pageX);			//measuring distance
    var distanceY = Math.abs(mouseDown.startY - ev.pageY);

    if (distanceX * distanceY < 2000 && newEl != null) {		//if surface is less that 2k px x px  that delete created element
        selected.el.removeChild(newEl);
        window.myHubProxy.invoke("removeElement", newEl.id);
    }

    mouseDown.leftTop =
        mouseDown.leftTopRot =
        mouseDown.rightBottom =
        mouseDown.rightBottomRot =
        mouseDown.replace =
        false;
    newEl = null;
};
document.body.oncontextmenu = function (ev) {
    ev.preventDefault();    //we dont want menu to appear
    if (ev.which == 3) {
        changeSelection(document.body);
    }
};
document.body.ondragstart = function () { return false; }  // draggig is causing bugs

document.getElementById('leftTop').onmousedown =
    document.getElementById('rightBottom').onmousedown =
    document.getElementById('leftTopRot').onmousedown =
    document.getElementById('rightBottomRot').onmousedown =
    document.getElementById('replace').onmousedown =
    function (e) {
        e.stopPropagation();
        if (e.which != 1) return;
        mouseDown[this.id] = true;
        mouseDown.startWidth = getOffset(selected.el).width;
        mouseDown.startHeight = getOffset(selected.el).height;
        mouseDown.startX = e.pageX;
        mouseDown.startY = e.pageY;
    }

el('radR1').onchange =
    el('radR2').onchange = function () {						//switching sizes style and attr
        if (el('radR1').checked) {
            selected.el.style.width = selected.el.width;
            selected.el.style.height = selected.el.height;

            selected.el.removeAttribute('width');
            selected.el.removeAttribute('height');

        } else {
            selected.el.width = selected.el.style.width.int();
            selected.el.height = selected.el.style.height.int();


            selected.el.style.width = null;
            selected.el.style.height = null;
        }
    }


function generateUniqueId() {
    return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
}
	//editor is visible after pressing "INSERT" button, so all that appear is considered as editor

editor.onmousedown =
	editor.onmousemove=
	editor.onkeydown=
	editor.oncontextmenu=
	editor.onmouseup=		function(ev){
								ev.stopPropagation();
							}
	editor.sh1=document.getElementById('sh1');
	editor.sh2=document.getElementById('sh2');
	editor.sh3=document.getElementById('sh3');
	editor.sh4=document.getElementById('sh4');
	editor.csh=document.getElementById('csh');
	editor.setStyle=document.getElementById('setStyle');
	editor.setAttr=document.getElementById('setAttr');
	editor.text=document.getElementById('text');

	editor.sh1.oninput=
	editor.sh2.oninput=
	editor.sh3.oninput=
	editor.sh4.oninput=
	editor.csh.oninput=    
				function(){
					selected.el.style['box-shadow']=editor.sh1.value+'px '+editor.sh2.value+'px '+editor.sh3.value+'px '+editor.sh4.value+'px '+editor.csh.value;
				}	

	editor.setStyle.oninput=function(e){
		var arr=this.value.replace(';','').split(":");
		selected.el.style[arr[0]]=arr[1];	
	}
	editor.onkeydown=function(e){
		var charCode = (typeof e.which == "number") ? e.which : e.keyCode;
		if(charCode==13){
			editor.setStyle.value="";
			editor.setAttr.value="";
		}
	}
    editor.setAttr.oninput=function(e){
    	var arr=this.value.replace(/\"/g,'').split("=");
		if(arr[1]=='undefined' || arr[1]==null) arr[1]='asd';		// if we have image than we clear size so that image would be in original resolution
			if(	arr[1].indexOf('.png')>-1 ||
				arr[1].indexOf('.jpg')>-1 ||
				arr[1].indexOf('.gif')>-1 ||
				arr[1].indexOf('.ico')>-1 ||
				arr[1].indexOf('.bmp')>-1 ||
				arr[1].indexOf('.tiff')>-1 
			){
				selected.el.removeAttribute('width');
				selected.el.removeAttribute('height');
				selected.el.style.width=null;
				selected.el.style.height=null;
				selected.el[arr[0]]=arr[1];
				fixReplace(selected.el);
			}
	} 
	editor.text.oninput=function(){										//insert text to div, algorithm for delete previous and write text in textarea
		if(selected.el!=document.body){
			var child = selected.el.firstChild;
			while(child) {
				var nextChild=child.nextSibling;
	    		if (child.nodeType === 3) { // nodeType === Node.TEXT_NODE
	       		 selected.el.removeChild(child);
	   		 }
		    child = nextChild;
			}
			selected.el.appendChild(document.createTextNode(this.value));
		}
	}

																	//now aligns
el('elAlignLeft').onclick=function(e){				
	e.stopPropagation();
	elAlignLeft();
}
el('elAlignCenter').onclick=function(e){
	e.stopPropagation();
	elAlignCenter();
}
el('elAlignRight').onclick=function(e){
	e.stopPropagation();
	elAlignRight();
}
el('TextAlignLeft').onclick=function(e){
	e.stopPropagation();
	selected.el.style['text-align']="left";
}
el('TextAlignCenter').onclick=function(e){
	e.stopPropagation();
	selected.el.style['text-align']="center";
}
el('TextAlignRight').onclick=function(e){
	e.stopPropagation();
	selected.el.style['text-align']="right";
}
																	// enter will delete value of inputs for style and or attribute